{"version":3,"file":"261.a445e1929a17032c365c.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus, updateMessage } from \"../../actions/chatActions\"\n\nimport socketCluster from \"socketcluster-client\";\n\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.disconnect();\n            }\n        });\n    }\n\n    bootstrap(params, dispatch, getState) {\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            autoReconnectOptions: {initialDelay: 5000, randomness: 5000}\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socket = this.socket = socketCluster.create(socketOptions);\n\n        var sampleChannel = null;\n\n        (async () => {\n            try {\n                for await (let status of socket.listener('connect')) {\n                    doActionByConnectionStatus(status);\n                }\n            } catch (e) {\n                let status = await socket.listener('connect').once();\n                doActionByConnectionStatus(status);\n            }\n        })();\n\n        function doActionByConnectionStatus(status) {\n            if (status.isAuthenticated && chatId > 0) {\n                connectVisitor();\n            } else {\n                authentificate();\n            }\n        }\n\n        function authentificate() {\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then(async (response) => {\n                await Promise.all([\n                    socket.invoke('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }),\n                    socket.listener('authenticate').once()\n                ]);\n                connectVisitor();\n            });\n        }\n\n       function visitorTypingListener(data)\n       {\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.transmitPublish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.transmitPublish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        function disconnect() {\n\n            if (sampleChannel !== null) {\n                try {\n                    sampleChannel.unsubscribe();\n                } catch (e) {\n\n                }\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        (async () => {\n            try {\n                for await (let event of socket.listener('disconnect')) {\n                    disconnect();\n                }\n            } catch (e) {\n                let status = await socket.listener('disconnect').once();\n                disconnect();\n            }\n        })();\n\n        function connectVisitor() {\n            var firstRun = sampleChannel == null;\n\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n\n            if (firstRun == true)\n            {\n                (async () => {\n                    try {\n                        for await (let event of sampleChannel.listener('subscribe')) {\n                            socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                                'op': 'vi_online',\n                                status: true\n                            });\n                            dispatch({\n                                'type': 'CHAT_UI_UPDATE',\n                                'data': {sync_interval: 10000}\n                            });\n                        }\n                    } catch (e) {\n                        let event = await sampleChannel.listener('subscribe').once();\n                        socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                            'op': 'vi_online',\n                            status: true\n                        });\n                    }\n\n                })();\n                (async () => {\n                    try {\n                        for await (let op of sampleChannel) {\n                            if (op.op == 'ot') { // Operator Typing Message\n                                if (op.data.status == true) {\n                                    dispatch({\n                                        'type': 'chat_status_changed',\n                                        'data': {text: op.data.ttx}\n                                    });\n                                } else {\n                                    dispatch({\n                                        'type': 'chat_status_changed',\n                                        'data': {text: ''}\n                                    });\n                                }\n                            } else if (op.op == 'cmsg' || op.op == 'schange') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])){\n                                    dispatch(fetchMessages({\n                                        'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                        'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                        'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                                        'theme' : state.chatwidget.get('theme')\n                                    }));\n                                }\n                            } else if (op.op == 'umsg') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])) {\n                                    updateMessage({'msg_id' :  op.msid,'id' : state.chatwidget.getIn(['chatData','id']), 'hash' : state.chatwidget.getIn(['chatData','hash'])})(dispatch, getState);\n                                }\n                            } else if (op.op == 'schange' || op.op == 'cclose') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])){\n                                    dispatch(checkChatStatus({\n                                        'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                        'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                        'mode' : state.chatwidget.get('mode'),\n                                        'theme' : state.chatwidget.get('theme')\n                                    }));\n                                }\n                            } else if (op.op == 'vo') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])) {\n                                    socket.transmitPublish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                                }\n                            }\n                        }\n                    } catch (e) {\n                        // Shut up old browsers\n                    }\n                })();\n            }\n       }\n\n       (async () => {\n            try {\n                for await (let event of socket.listener('deauthenticate')) {\n                    authentificate();\n                }\n            } catch (e) {\n                let event = await socket.listener('deauthenticate').once();\n                authentificate();\n            }\n       })();\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"names":["_nodeJSChat","_this","_classCallCheck","this","socket","helperFunctions","eventEmitter","addListener","disconnect","_createClass","key","value","params","dispatch","getState","state","chatId","chatwidget","getIn","syncDefault","socketOptions","protocolVersion","hostname","path","autoReconnectOptions","initialDelay","randomness","port","parseInt","secure","instance_id","socketCluster","sampleChannel","doActionByConnectionStatus","status","isAuthenticated","connectVisitor","authentificate","_ref2","chat_id","window","lhcAxios","post","lhcChat","headers","then","_x","_asyncToGenerator","_regeneratorRuntime","_callee2","response","_context2","prev","next","Promise","all","invoke","hash","data","chanelName","listener","once","stop","apply","arguments","visitorTypingListener","transmitPublish","msg","messageSend","messageSendError","unsubscribe","e","removeListener","sync_interval","firstRun","subscribe","_callee4","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context4","_asyncIterator","sent","done","t0","return","finish","t1","_callee5","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","op","_state","_state2","_state3","_state4","_context5","text","ttx","hasIn","fetchMessages","get","updateMessage","msid","checkChatStatus","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context","_callee3","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context3","_callee6","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_context6","nodeJSChat"],"sourceRoot":""}